// generic drawing of more complex things

@mixin entry($t, $fc: $primary) {
//
// entry
//
// $t: entry type
// $fc: focus color
//

  @if $t == normal {
    transition: $transition,
                border $ripple-fade-out-duration $ease-out,
                box-shadow $ripple-fade-out-duration $ease-out;
    box-shadow: inset 0 0 0 1px transparent;
    background-color: $base;
    color: $text;

    @if $variant == "light" {
      border-color: $border;
      border-bottom-color: $border-bottom;
    } @else {
      border-color: $border-bottom;
      border-top-color: $border;
    }
  }

  @if $t == hover {
    background-color: $base;
    box-shadow: inset 0 0 0 1px transparent;
    border-color: $text-disabled;
  }

  @if $t == focus {
    transition: $transition,
                border $ripple-fade-out-duration $ease-out,
                box-shadow $ripple-fade-out-duration $ease-out;
    background-color: $base;
    box-shadow: inset 0 0 0 1px if($fc == $primary, $text-disabled, $fc);
    border-color: if($fc == $primary, $text-disabled, $fc);
  }

  @if $t == checked {
    background-color: $base;
    box-shadow: inset 0 0 0 1px if($fc == $primary, $text-disabled, $fc);
    border-color: if($fc == $primary, $text-disabled, $fc);
  }

  @if $t == disabled {
    box-shadow: inset 0 0 0 1px transparent;
    background-color: $base-alt;
    color: $text-disabled;
  }

  @if $t == flat-normal {
    transition: $transition, box-shadow $ripple-fade-out-duration $ease-out;
    border-image: none;
    box-shadow: inset 0 0 0 2px transparent;
    background-color: if($fc == $primary, $base, $fc);
    color: if($fc == $primary, $text, on($fc));
  }

  @if $t == flat-hover {
    box-shadow: inset 0 0 0 1px $divider;
  }

  @if $t == flat-focus {
    border-image: none;
    box-shadow: inset 0 0 0 2px if($fc == $primary, $base, $fc);
  }

  @if $t == flat-disabled {
    box-shadow: inset 0 0 0 2px transparent;
    background-color: $base-alt;
    color: $text-disabled;
  }
}


@mixin button($t) {
//
// button
//
// $t: button type
//

  @if $t == normal {
    transition: $transition,
                border $ripple-fade-out-duration $ease-out,
                box-shadow $ripple-fade-out-duration $ease-out;
    outline: none;
    box-shadow: inset 0 0 0 1px transparent, 0 0 0 2px transparent;
    background-color: $base;
    color: $text;

    @if $variant == "light" {
      border-color: $border;
      border-bottom-color: $border-bottom;
    } @else {
      border-color: $border-bottom;
      border-top-color: $border;
    }
  }

  @if $t == hover {
    box-shadow: inset 0 0 0 1px transparent, 0 0 0 2px transparent;
    background-color: $base;
    border-color: $track;
  }

  @if $t == focus {
    box-shadow: inset 0 0 0 1px transparent, 0 0 0 2px $text-secondary;
    border-color: transparent;
    background-clip: padding-box;
  }

  @if $t == active {
    animation: none;
    transition: $transition,
                border $ripple-fade-out-duration $ease-out,
                box-shadow $ripple-fade-out-duration $ease-out;
    box-shadow: inset 0 0 0 1px $track, 0 0 0 2px transparent;
  }

  @if $t == disabled {
    box-shadow: none;
    background-color: $base-alt;
    color: $text-disabled;
  }

  @if $t == checked {
    box-shadow: inset 0 0 0 1px transparent, 0 0 0 2px transparent;
    background-clip: border-box;
    background-color: $primary;
    color: on($primary);
    border-color: lighten($primary, 5%);
    border-bottom-color: darken($primary, 5%);
    transition: $transition, background-color $ripple-fade-out-duration $ease-out;
  }

  @if $t == checked-hover {
    box-shadow: inset 0 0 0 9999px transparent;
  }

  @if $t == checked-disabled {
    box-shadow: none;
    background-color: rgba($primary, 0.35);
    border-color: rgba($primary, 0.35);
    background-clip: padding-box;
    color: rgba(on($primary), 0.5);
  }

  @if $t == flat-normal {
    transition: $transition,
                box-shadow $ripple-fade-out-duration $ease-out;
    outline: none;
    box-shadow: inset 0 0 0 9999px transparent;
    background-color: transparent;
    border: none;
    color: $text-secondary;
  }

  @if $t == flat-hover {
    box-shadow: inset 0 0 0 9999px $overlay-hover;
    color: $text;
  }

  @if $t == flat-focus {
    box-shadow: inset 0 0 0 2px $overlay-focus;
    color: $text;
  }

  @if $t == flat-active {
    animation: none;
    transition: $transition,
                box-shadow $ripple-fade-out-duration $ease-out;
    box-shadow: inset 0 0 0 9999px $overlay-active;
    color: $text;
  }

  @if $t == flat-disabled {
    box-shadow: none;
    background-color: transparent;
    color: $text-secondary-disabled;
  }

  @if $t == flat-checked {
    background-color: $overlay-checked;
    color: $text;
  }

  @if $t == flat-checked-disabled {
    background-color: $overlay-checked;
    color: $text-disabled;
  }
}


@mixin overshoot($p, $t:normal, $c:$text) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==right or $p==left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentize($c, 0.93);

  @if $c==$text {
    $_small_gradient_color: $divider;
    $_big_gradient_color: $primary;

    @if $t==backdrop { $_small_gradient_color: $fill; }
  }

  $_small_gradient: radial-gradient(farthest-side at $p,
                                    $_small_gradient_color 85%,
                                    transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $p,
                                  $_big_gradient_color,
                                  transparentize($_big_gradient_color, 1));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: $track;
  $_undershoot_color_light: transparent;

  $_gradient_dir: left;
  $_dash_bg_size: 12px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: left $p;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 12px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p top;
  }

  background-color: transparent; // shouldn't be needed, but better to be sure

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  margin: 0 4px;

  @if ($p == left) or ($p == right) {
    margin: 4px 0;
  }
}
